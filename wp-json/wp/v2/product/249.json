{"id":249,"date":"2017-11-03T20:30:58","date_gmt":"2017-11-03T20:30:58","guid":{"rendered":"https:\/\/research.dwi.ufl.edu\/people\/angelos\/?post_type=product&#038;p=249"},"modified":"2020-07-17T21:40:34","modified_gmt":"2020-07-17T21:40:34","slug":"teaching-computer-programming-to-humanists-using-emoticon-like-scripting","status":"publish","type":"product","link":"https:\/\/abarmpou.github.io/angelos\/page\/teaching-computer-programming-to-humanists-using-emoticon-like-scripting\/","title":{"rendered":"Teaching computer programming to humanists using emoticon-like scripting"},"content":{"rendered":"<p><iframe loading=\"lazy\" src=\"https:\/\/www.youtube.com\/embed\/DOQcUWMz8xU?feature=oembed\" width=\"1200\" height=\"600\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\n<p>In many ways, learning to program can be challenging for humanists although computer programming is an essential skill for digital humanities. According to published studies this is often attributed to poor self-efficacy, limited prior experience with computers, or inability to relate personal experiences to abstract programming concepts. In this session, a new educational framework will be demonstrated that overcomes the problems of the existing teaching\/learning approaches by adding a human-readable layer on the top of existing programming languages.<\/p>\n<p>The proposed method is based on the use of emoticon-like typing that has become popular with social networks. Emoticons are visual representations that have one to one relationship with a corresponding combination of characters such as &#8220;:)&#8221;. These can be perceived as visual interpretations of the corresponding characters that provide instant feedback to the user regarding the meaning associated with the typed code. The proposed framework utilizes a set of meaningful visual replacements of each grammatical token in a given programming language that appear instantly when complete valid tokens are typed. The proposed method, is based on the following three hypotheses: a) the immediate feedback given to the programmer can result in improved learning outcomes as it stimulates the brain to build one-to-one connections, b) the unique correspondence of each visual replacement, with a valid programming token re-enforces the learning of the syntax in an intuitive trial-and-error framework, c) the use of visual replacements remove visually the grammatical and syntactical details of a programming language and reveal to the users the logic of the program in the form of a pseudo code. The smallest units in any writing system are known as graphemes. Graphemes are not only the characters in a given alphabet but also the accents, punctuation marks, and other symbols that may be used in the corresponding writing system. Similarly, in any programming language a set of graphemes is used, which usually includes the graphemes of the Latin alphabet as well as other logical, mathematical, and structural symbols required for the needs of a particular programming language. Let us consider the following written sample: &#8220;not:(or:|!be:)&#8221; and its equivalent in another written language with different graphemes (emoticons): &#8220;not\uf04cor\uf04b!be\uf04a&#8221;. Obviously, the latter is easier to read, but the former is easier to write in the form of a typed text in a computer device. This example shows that there exist written languages that are primarily meant to be written (possibly to serve as an input to a computer system), and others that are primarily meant to be read. The proposed educational framework is based on a rigid theoretical foundation regarding grammatical construction of languages and employs a set of visual or textual metaphors to teach computer programming to humanists. The technique has been preliminary tested using 35 adult subjects and it has improved significantly their learning outcome in terms of syntax recall and logic comprehension, compared to the performance achieved using traditional text editors for source code editing. The audience will be invited to bring their own tablet\/laptop computers during this workshop.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>In many ways, learning to program can be challenging for humanists although computer programming is an essential skill for digital humanities. According to published studies this is often attributed to poor self-efficacy, limited prior experience with computers, or inability to relate personal experiences to abstract programming concepts. In this session, a new educational framework will<span class=\"read-more-faq\"><a href=\"https:\/\/abarmpou.github.io/angelos\/page\/teaching-computer-programming-to-humanists-using-emoticon-like-scripting\/\">Read More<\/a><\/span><\/p>\n","protected":false},"featured_media":206,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"_links":{"self":[{"href":"https:\/\/abarmpou.github.io/angelos\/wp-json\/wp\/v2\/product\/249"}],"collection":[{"href":"https:\/\/abarmpou.github.io/angelos\/wp-json\/wp\/v2\/product"}],"about":[{"href":"https:\/\/abarmpou.github.io/angelos\/wp-json\/wp\/v2\/types\/product"}],"replies":[{"embeddable":true,"href":"https:\/\/abarmpou.github.io/angelos\/wp-json\/wp\/v2\/comments?post=249"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/abarmpou.github.io/angelos\/wp-json\/wp\/v2\/media\/206"}],"wp:attachment":[{"href":"https:\/\/abarmpou.github.io/angelos\/wp-json\/wp\/v2\/media?parent=249"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}